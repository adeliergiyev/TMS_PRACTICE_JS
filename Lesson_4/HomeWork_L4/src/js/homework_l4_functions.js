//This JS file is for executing Home work lesson 4. Functions

//–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–≥–∏–π —Ä–µ–∂–∏–º
"use strict";
//–ï—Å–ª–∏ –≤ –∑–∞–¥–∞—á–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã - –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏ —Ä–∞—Å–ø–∏—Å–∞—Ç—å –∏—Ö –¥–µ—Ç–∞–ª—å–Ω–æ (–∑–∞—á–µ–º –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∏ –∫–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç)

//NORMAL LEVEL:
//Ex 1. –ù–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é **getSum**, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã—Å—á–∏—Ç—ã–≤–∞—Ç—å —Å—É–º–º—É —á–∏—Å–µ–ª –æ—Ç –Ω—É–ª—è, –¥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –º—ã –≤ –Ω–µ—ë –ø–µ—Ä–µ–¥–∞–µ–º. 
//–ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–¥–∏–º —á–∏—Å–ª–æ 100 —Ç–æ, –Ω–∞–¥–æ –≤—ã—á–∏—Å–ª–∏—Ç—å —Å—É–º–º—É —á–∏—Å–µ–ª –æ—Ç 0 –¥–æ 100 (–¥–æ–ª–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—Å—è 5050).

//Get random number from User thrue the PROMPT:
const enteredNumner = +(prompt("Enter any number üé≤:"));

//Function that return sum of all numbers untill entered number by user
const getSum = function(mainNumber) {
    let sum = 0; 
    for(let i = 0; i <= mainNumber; i++) {
        sum += i;
    }
    return sum;
}

//Function expression
console.log("Total Summa is equel: ", getSum(enteredNumner));



//Ex 2.
//–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –∫–æ—Ç–æ—Ä–∞—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ —Å–µ–±—è —Å—É–º–º—É –∫—Ä–µ–¥–∏—Ç–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –∫–ª–∏–µ–Ω—Ç –∏ –≤–µ—Ä–Ω–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–ø–ª–∞—Ç—ã –ø–æ –∫—Ä–µ–¥–∏—Ç—É:
//+ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –≤ –≥–æ–¥ - 17%, 
//+ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–µ—Ç - 5.
//–ú—ã –ø–∏—à–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ö–æ—Ä–æ—à–µ–≥–æ –±–∞–Ω–∫–∞, –ø–æ—ç—Ç–æ–º—É —Å—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞ –Ω–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è.

//Get amount of credit from User thrue the PROMPT:
const creditSumma = +(prompt("Enter Sum Of Requesting Credit, CZK ü§ëü§ëü§ë:"));

//Function that return total interest overpayments based on enterd amount of credit by user
const getInterestOverpaymentAmount = function(creditSumma) {
    let annualInterestRate = 0.17; // Annual Interest Rate Of Bank 17%
    let periodYears = 5; //Period of credit 5 years

    const totalInterestOverpayments = creditSumma * annualInterestRate * periodYears;
    return totalInterestOverpayments.toFixed(2);
}

//Function expression and displaying results in console of browser
console.log(`Total Sum Of Overpaying: ${getInterestOverpaymentAmount(creditSumma)} CZK`);

//Ex 3. 
//–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥—ã –æ–±—Ä–µ–∑–∫–∏ —Å—Ç—Ä–æ–∫:
//–ù–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é  **trimString** –∫–æ—Ç–æ—Ä–∞—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç—Ä–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞:
//+ —Å—Ç—Ä–æ–∫—É 
//+ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 
//+ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ
//–ü–æ—Å–ª–µ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –æ–±—Ä–µ–∑–∞–Ω–Ω—É—é –ø–æ –∑–Ω–∞—á–µ–Ω–∏—è–º –æ—Ç –∏ –ø–æ

//Getting string text from user thrue the PROMPT:
const gettedString = String(prompt("Entered any word with 8 signs:")),
    trimFrom = 2,
    trimTo = 5;

    debugger;
//Function that return trimmed text from 2nd to 5th sign:
const trimString = function(stringText, from, to) {
    console.log("Entered word: ", stringText);
    return stringText.slice(from, to);
}

//Showing in console results after returning trimmed text from function: 
console.log(`The trimmed string: ${trimString(gettedString, trimFrom, trimTo)}`);



//Ex 4. 
//–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —á–∏—Å–ª–æ:
//–ù–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é **getSumNumbers**, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å —á–∏—Å–ª–æ –∏ –≤—ã—á–∏—Å–ª—è—Ç—å —Å—É–º–º—É —Ü–∏—Ñ—Ä –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ—Å—Ç–æ–∏—Ç —á–∏—Å–ª–æ.
//Ôºû–î–ª—è 2021 —ç—Ç–æ –±—É–¥–µ—Ç 5.

//
const newNumber = +(prompt("Entered some number:")) || false;

//Function that return digitals sum of entered number:
const getSumNumbers = function(newNumber) {
    console.log("Entered number: ", newNumber);
    if (newNumber) {
        return newNumber
        .toString() //transform value from number to string;
        .split('') //separate entered number to array of signs;
        .map(Number) //change type of all signs to number;
        .reduce((accomulation, currentValue) => accomulation + currentValue, 0); //sumirize all signs in array;
    } else {
        return newNumber = "The Number isn't entered."
    }

}

//Showing in console results after returning value from function: 
console.log(`Summa of entered diggitals is equel: ${getSumNumbers(newNumber)}`);




//Ex 5. 
//–ù–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é **getSum** –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–≤–∞ —Ü–µ–ª—ã—Ö —á–∏—Å–ª–∞ –∞ –∏ b, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏, 
//–Ω–∞–π—Ç–∏ —Å—É–º–º—É –≤—Å–µ—Ö —á–∏—Å–µ–ª –º–µ–∂–¥—É –Ω–∏–º–∏, –≤–∫–ª—é—á–∞—è –∏—Ö, –∏ –≤–µ—Ä–Ω—É—Ç—å –µ–µ. –ï—Å–ª–∏ –¥–≤–∞ —á–∏—Å–ª–∞ —Ä–∞–≤–Ω—ã, –≤–µ—Ä–Ω–∏—Ç–µ –∞ –∏–ª–∏ b. –í–æ–∑–º–æ–∂–Ω–∞ —Å–∏—Ç—É–∞—Ü–∏—è, –∫–æ–≥–¥–∞ –∞ –±—É–¥–µ—Ç –±–æ–ª—å—à–µ b, 
//—Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –Ω–∞ —ç—Ç–æ

/** getSum (1, 0) == 1 // 1 + 0 = 1
 *  getSum (1, 2) == 3 // 1 + 2 =3
 *  getsumÔºà3Ôºå1Ôºâ == 4 // 1 + 2 + 3 = 4 
 *  getSum (0, 1) == 1 // 0 + 1 = 1 
 *  getSum (1, 1) == 1 // 1 Since both are same
 *  getsumÔºà-1, 0Ôºâ== -1 // -1 + 0 = -1
 *  getSum (-1, 2) == 2 // -1 + 0 + 1 + 2 = 2
 */

//This
const numberAlfa = parseInt(prompt("Entered ALFA:", 0), 10) || 0;
const numberBeta = parseInt(prompt("Entered BETA:", 0), 10) || 0;

//Function that return digitals sum of entered number:
const getSumBetweenNumbers = function(numberAlfa, numberBeta) {
    console.log("Entered ALFA: ", numberAlfa);
    console.log("Entered BETA: ", numberBeta);

    if (numberAlfa === numberBeta) return numberAlfa;

    if (numberAlfa > numberBeta) [numberAlfa, numberBeta] = [numberBeta, numberAlfa];

    let sumBetweenNumbers = 0;

    for(let i = numberAlfa; i <= numberBeta; i++) {
        sumBetweenNumbers += i;
    }
    //debugger; 

    return sumBetweenNumbers;
}

//Showing in console results after returning value from function: 
console.log(`Summa BETWEEN entered diggitals is equel: ${Number(getSumBetweenNumbers(numberAlfa, numberBeta))}`);

//Ex 6. –ò–∑—É—á–∏—Ç—å –∫–∞–∫ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
//–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é **fooboo** –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ —Ç—Ä–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞:
//+ –±—É–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ 
//+ —Ñ—É–Ω–∫—Ü–∏—é **foo** –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç –≤ –∫–æ–Ω—Å–æ–ª—å —Å–≤–æ–µ –∏–º—è
//+ —Ñ—É–Ω–∫—Ü–∏—é **boo** –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≤–æ–¥–∏—Ç –≤ –∫–æ–Ω—Å–æ–ª—å —Å–≤–æ–µ –∏–º—è
//–ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ –±—É–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ **true** –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é **foo** –∏–Ω–∞—á–µ **boo**

//This
let userInput;
let booleanVar;

userInput = +(prompt("Enter 1 or 0:", 0));

console.log("Input", userInput);

if (userInput === 1 || userInput === 0) {
    booleanVar = !!userInput;
}

console.log("Bool", booleanVar);

function foo() {
    console.log("Function Foo");
};

function boo() {
    console.log("Function Boo");
};

function fooboo(booleanVar, foo, boo) {
    booleanVar ? foo() : boo();
};

fooboo(booleanVar, foo, boo);

//ADVANCED LEVEL:
//Ex 1. 
// + –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç 3 —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏—è –∞, b, —Å. –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å
//**true**, –µ—Å–ª–∏ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ –º–æ–∂–Ω–æ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–æ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏ –∑–∞–¥–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã, –∏ **false** –≤ –ª—é–±–æ–º –¥—Ä—É–≥–æ–º —Å–ª—É—á–∞–µ. 
//–ù–∞–π—Ç–∏ —Ñ–æ—Ä–º—É–ª—É —Ä–∞—Å—Å—á–µ—Ç–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ

//This
// const sideA = +(prompt("Enter please side A:", 0)) || 0;
// const sideB = +(prompt("Enter please side B:", 1)) || 0;
// const sideC = +(prompt("Enter please side C:", 2)) || 0;

// console.log(`A Side: ${sideA}`);
// console.log(`B Side: ${sideB}`);
// console.log(`C Side: ${sideC}`);

// function isValidTriangle(sideA, sideB, sideC) {
//         return (sideA + sideB) > sideC && (sideA + sideC) > sideB && (sideB + sideC) > sideA;
// }

// console.log(`Is Triangle is possible?: ${isValidTriangle(sideA, sideB, sideC)}`);

//Ex 2.
// + –í–∞—à–∞ –∑–∞–¥–∞—á–∞ - —Ä–∞–∑–±–∏—Ç—å –ø–ª–∏—Ç–∫—É —à–æ–∫–æ–ª–∞–¥–∞ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ n —Ö —Ç –Ω–∞ –º–∞–ª–µ–Ω—å–∫–∏–µ –∫–≤–∞–¥—Ä–∞—Ç—ã. 
//–ö–∞–∂–¥—ã–π –∫–≤–∞–¥—Ä–∞—Ç –∏–º–µ–µ—Ç —Ä–∞–∑–º–µ—Ä 1x1 –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–∑–±–∏—Ç. –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ 
//–Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –Ω–∞–¥–ª–æ–º–æ–≤.

// + –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –≤–∞–º –¥–∞–µ—Ç—Å—è –ø–ª–∏—Ç–∫–∞ —à–æ–∫–æ–ª–∞–¥–∞ —Ä–∞–∑–º–µ—Ä–æ–º 2 —Ö 1, –≤—ã –º–æ–∂–µ—Ç–µ —Ä–∞–∑–¥–µ–ª–∏—Ç—å –µ–µ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–≤–∞–¥—Ä–∞—Ç—ã –≤—Å–µ–≥–æ –∑–∞ –æ–¥–∏–Ω –Ω–∞–¥–ª–æ–º, 
// –Ω–æ –¥–ª—è —Ä–∞–∑–º–µ—Ä–∞ 3 —Ö 1 –≤—ã –¥–æ–ª–∂–Ω—ã —Å–¥–µ–ª–∞—Ç—å –¥–≤–∞ –Ω–∞–¥–ª–æ–º–∞.

// + –ï—Å–ª–∏ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã, –≤—ã –¥–æ–ª–∂–Ω—ã –≤–µ—Ä–Ω—É—Ç—å 0 (–ø–æ—Å–∫–æ–ª—å–∫—É –Ω–∞–¥–ª–æ–º—ã –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è, –µ—Å–ª–∏ —É –Ω–∞—Å –Ω–µ—Ç —à–æ–∫–æ–ª–∞–¥–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è). 
//–í–≤–æ–¥ –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.

//
const usersArr = [
    {name: "Aleks", Ege: 23, Sername: "Deliergiyev"},
    {name: "Aleksandra", Ege: 25, Sername: "Suvorova"}
];

usersArr.forEach(user => console.log(user.name + " " + user.Sername));